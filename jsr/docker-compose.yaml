version: "3"
services:
  db:
    image: postgres:15
    command: postgres -c 'max_connections=1000'
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: registry
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      interval: 5s
      retries: 20
    # optional: to persist data
    # volumes:
    #   - ./data/db:/var/lib/postgresql/data
  gcs:
    image: fsouza/fake-gcs-server:latest
    command: -scheme http -filesystem-root=/gcs-data -port 4080
    # optional: to persist data
    # volumes:
    #   - ./data/gcs:/gcs-data
  api:
    depends_on:
      db:
        condition: service_healthy
      gcs:
        condition: service_started
    image: ghcr.io/teidesu/jsr-api:latest
    # or build locally
    # build: 
    #   context: .
    #   dockerfile: Dockerfile.api
    environment:
      - "DATABASE_URL=postgres://user:password@db/registry"
      - "GITHUB_CLIENT_ID=fake"
      - "GITHUB_CLIENT_SECRET=fake"
      - "GCS_ENDPOINT=http://gcs:4080"
      - "MODULES_BUCKET=modules"
      - "PUBLISHING_BUCKET=publishing"
      - "DOCS_BUCKET=docs"
      - "NPM_BUCKET=npm"
      - "REGISTRY_URL=http://localhost:4873"
      - "NPM_URL=http://example.com/unused"
  frontend:
    image: ghcr.io/teidesu/jsr-frontend:latest
    # or build locally
    # build: 
    #   context: .
    #   dockerfile: Dockerfile.frontend
    environment:
      - "API_ROOT=http://api:8001/api"
  nginx:
    depends_on:
      - api
      - frontend
    image: nginx:1.21
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "4873:80"
networks: 
  jsr: {}